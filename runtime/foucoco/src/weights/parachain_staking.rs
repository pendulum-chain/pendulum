
//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-12-26, STEPS: `50`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("foucoco"), DB CACHE: 1024

// Executed Command:
// ./target/production/pendulum-node
// benchmark
// pallet
// --chain
// foucoco
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// parachain-staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 5
// --output
// runtime/foucoco/src/weights/parachain_staking.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for SubstrateWeight<T> {
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::ForceNewRound` (r:0 w:1)
	/// Proof: `ParachainStaking::ForceNewRound` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:41 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:1640 w:1640)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:40 w:40)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3891 ±0) + n * (4058 ±0)`
		//  Estimated: `101750 + m * (35157 ±2_053) + n * (35643 ±14)`
		// Minimum execution time: 454_000_000 picoseconds.
		Weight::from_parts(457_000_000, 101750)
			// Standard Error: 4_993_083
			.saturating_add(Weight::from_parts(81_190_110, 0).saturating_mul(n.into()))
			// Standard Error: 4_993_083
			.saturating_add(Weight::from_parts(74_935_136, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(124_u64))
			.saturating_add(T::DbWeight::get().reads((15_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((13_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(81_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((13_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 35157).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 35643).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[8, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434 + n * (48 ±0)`
		//  Estimated: `3406`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3406)
			// Standard Error: 9_857
			.saturating_add(Weight::from_parts(116_614, 0).saturating_mul(n.into()))
			// Standard Error: 10_137
			.saturating_add(Weight::from_parts(205_099, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:40 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:41 w:41)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:40 w:40)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3152 ±0) + n * (2727 ±0)`
		//  Estimated: `9227 + m * (2716 ±0) + n * (4505 ±50)`
		// Minimum execution time: 151_000_000 picoseconds.
		Weight::from_parts(153_000_000, 9227)
			// Standard Error: 169_655
			.saturating_add(Weight::from_parts(2_220_581, 0).saturating_mul(n.into()))
			// Standard Error: 175_167
			.saturating_add(Weight::from_parts(15_264_849, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(9_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4505).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1790 + m * (47 ±0) + n * (98 ±0)`
		//  Estimated: `5495`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(25_850_368, 5495)
			// Standard Error: 30_769
			.saturating_add(Weight::from_parts(874_214, 0).saturating_mul(n.into()))
			// Standard Error: 29_254
			.saturating_add(Weight::from_parts(813_735, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:39 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1872 ±0) + n * (2083 ±0)`
		//  Estimated: `3406 + n * (4505 ±0)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(62_000_000, 3406)
			// Standard Error: 59_476
			.saturating_add(Weight::from_parts(2_552_229, 0).saturating_mul(n.into()))
			// Standard Error: 59_920
			.saturating_add(Weight::from_parts(93_287, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4505).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `807 + m * (96 ±0) + n * (55 ±0)`
		//  Estimated: `10000`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(10_255_290, 10000)
			// Standard Error: 26_268
			.saturating_add(Weight::from_parts(477_026, 0).saturating_mul(n.into()))
			// Standard Error: 19_774
			.saturating_add(Weight::from_parts(464_254, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:41 w:41)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:40 w:40)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1265 ±0) + n * (651 ±0)`
		//  Estimated: `5495 + m * (2716 ±0) + n * (206 ±12)`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 5495)
			// Standard Error: 98_715
			.saturating_add(Weight::from_parts(975_189, 0).saturating_mul(n.into()))
			// Standard Error: 99_451
			.saturating_add(Weight::from_parts(16_709_683, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 206).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (481 ±0) + n * (340 ±0) + u * (20 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 57_000_000 picoseconds.
		Weight::from_parts(58_000_000, 5495)
			// Standard Error: 54_316
			.saturating_add(Weight::from_parts(1_287_477, 0).saturating_mul(n.into()))
			// Standard Error: 52_412
			.saturating_add(Weight::from_parts(6_875_376, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (452 ±0) + n * (319 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5495)
			// Standard Error: 71_980
			.saturating_add(Weight::from_parts(754_017, 0).saturating_mul(n.into()))
			// Standard Error: 70_392
			.saturating_add(Weight::from_parts(6_285_855, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::LastDelegation` (r:1 w:1)
	/// Proof: `ParachainStaking::LastDelegation` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:1 w:1)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3153 + m * (114 ±0) + n * (105 ±0)`
		//  Estimated: `10000`
		// Minimum execution time: 69_000_000 picoseconds.
		Weight::from_parts(38_475_113, 10000)
			// Standard Error: 37_066
			.saturating_add(Weight::from_parts(846_646, 0).saturating_mul(n.into()))
			// Standard Error: 38_062
			.saturating_add(Weight::from_parts(944_532, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3310 + m * (95 ±0) + n * (104 ±0) + u * (20 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(27_526_457, 6028)
			// Standard Error: 41_648
			.saturating_add(Weight::from_parts(1_022_633, 0).saturating_mul(n.into()))
			// Standard Error: 42_765
			.saturating_add(Weight::from_parts(795_585, 0).saturating_mul(m.into()))
			// Standard Error: 196_345
			.saturating_add(Weight::from_parts(732_623, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2789 + m * (75 ±0) + n * (82 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(10_393_349, 6028)
			// Standard Error: 50_800
			.saturating_add(Weight::from_parts(994_445, 0).saturating_mul(n.into()))
			// Standard Error: 52_165
			.saturating_add(Weight::from_parts(986_784, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(1921), added: 2416, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2789 + m * (75 ±0) + n * (82 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(28_426_093, 6028)
			// Standard Error: 39_323
			.saturating_add(Weight::from_parts(613_553, 0).saturating_mul(n.into()))
			// Standard Error: 40_380
			.saturating_add(Weight::from_parts(738_134, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `906 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(27_667_015, 4764)
			// Standard Error: 15_390
			.saturating_add(Weight::from_parts(126_435, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:0 w:1)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:1)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `754`
		//  Estimated: `6028`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 6028)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:41 w:41)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 40]`.
	fn increment_collator_rewards(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `721 + m * (98 ±0)`
		//  Estimated: `5495 + m * (2531 ±0)`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(18_872_638, 5495)
			// Standard Error: 16_920
			.saturating_add(Weight::from_parts(8_957_410, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `575`
		//  Estimated: `3593`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::LastRewardReduction` (r:1 w:1)
	/// Proof: `ParachainStaking::LastRewardReduction` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:41 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:1640 w:1640)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:40 w:40)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3891 ±0) + n * (3996 ±0)`
		//  Estimated: `101750 + m * (35157 ±2_053) + n * (35643 ±8)`
		// Minimum execution time: 401_000_000 picoseconds.
		Weight::from_parts(403_000_000, 101750)
			// Standard Error: 5_012_898
			.saturating_add(Weight::from_parts(81_967_136, 0).saturating_mul(n.into()))
			// Standard Error: 5_012_898
			.saturating_add(Weight::from_parts(74_054_895, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(125_u64))
			.saturating_add(T::DbWeight::get().reads((15_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((13_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(82_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((13_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 35157).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 35643).saturating_mul(n.into()))
	}
}