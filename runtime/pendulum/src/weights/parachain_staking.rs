
//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-01-02, STEPS: `50`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("pendulum"), DB CACHE: 1024

// Executed Command:
// ./target/production/pendulum-node
// benchmark
// pallet
// --chain
// pendulum
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// parachain-staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 5
// --output
// runtime/pendulum/src/weights/parachain-staking.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for SubstrateWeight<T> {
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::ForceNewRound` (r:0 w:1)
	/// Proof: `ParachainStaking::ForceNewRound` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:51 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2050 w:2050)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:50 w:50)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 50]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (4859 ±0) + n * (4052 ±0)`
		//  Estimated: `126940 + m * (46036 ±2_476) + n * (34326 ±12)`
		// Minimum execution time: 551_000_000 picoseconds.
		Weight::from_parts(554_000_000, 126940)
			// Standard Error: 4_960_410
			.saturating_add(Weight::from_parts(81_623_177, 0).saturating_mul(n.into()))
			// Standard Error: 6_197_920
			.saturating_add(Weight::from_parts(96_362_841, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(154_u64))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((17_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(101_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((18_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 46036).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 34326).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:10 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[8, 50]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_max_selected_candidates(n: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (480 ±0) + n * (48 ±0)`
		//  Estimated: `5495 + n * (904 ±19)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 5495)
			// Standard Error: 29_167
			.saturating_add(Weight::from_parts(1_233_866, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 904).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:41 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:41 w:41)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:40 w:40)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 50]`.
	/// The range of component `m` is `[0, 40]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3270 ±0) + n * (2656 ±0)`
		//  Estimated: `10303 + m * (2716 ±45) + n * (3520 ±44)`
		// Minimum execution time: 148_000_000 picoseconds.
		Weight::from_parts(150_000_000, 10303)
			// Standard Error: 366_660
			.saturating_add(Weight::from_parts(957_545, 0).saturating_mul(n.into()))
			// Standard Error: 470_242
			.saturating_add(Weight::from_parts(16_804_451, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(9_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3520).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 49]`.
	/// The range of component `m` is `[0, 40]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2545 + m * (39 ±0) + n * (80 ±0)`
		//  Estimated: `5495 + m * (38 ±0)`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(26_466_285, 5495)
			// Standard Error: 41_211
			.saturating_add(Weight::from_parts(597_419, 0).saturating_mul(n.into()))
			// Standard Error: 49_656
			.saturating_add(Weight::from_parts(1_056_090, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:41 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 49]`.
	/// The range of component `m` is `[0, 40]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1968 ±0) + n * (2082 ±0)`
		//  Estimated: `3886 + m * (426 ±41) + n * (3627 ±41)`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(55_000_000, 3886)
			// Standard Error: 47_977
			.saturating_add(Weight::from_parts(2_477_773, 0).saturating_mul(n.into()))
			// Standard Error: 60_338
			.saturating_add(Weight::from_parts(345_290, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 426).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3627).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 49]`.
	/// The range of component `m` is `[0, 40]`.
	fn cancel_leave_candidates(_n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `738 + m * (48 ±0) + n * (52 ±0)`
		//  Estimated: `5495 + m * (38 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(24_808_484, 5495)
			// Standard Error: 24_839
			.saturating_add(Weight::from_parts(375_231, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:41 w:41)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:40 w:40)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[9, 49]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1342 ±0) + n * (608 ±0)`
		//  Estimated: `5495 + m * (2716 ±13) + n * (191 ±11)`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 5495)
			// Standard Error: 104_064
			.saturating_add(Weight::from_parts(1_060_027, 0).saturating_mul(n.into()))
			// Standard Error: 130_874
			.saturating_add(Weight::from_parts(16_192_609, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 191).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 49]`.
	/// The range of component `m` is `[0, 40]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (506 ±0) + n * (272 ±0) + u * (20 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(59_000_000, 5495)
			// Standard Error: 56_216
			.saturating_add(Weight::from_parts(1_336_410, 0).saturating_mul(n.into()))
			// Standard Error: 68_354
			.saturating_add(Weight::from_parts(6_746_219, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 49]`.
	/// The range of component `m` is `[0, 40]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (478 ±0) + n * (261 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5495)
			// Standard Error: 58_058
			.saturating_add(Weight::from_parts(580_091, 0).saturating_mul(n.into()))
			// Standard Error: 71_428
			.saturating_add(Weight::from_parts(6_333_962, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::LastDelegation` (r:1 w:1)
	/// Proof: `ParachainStaking::LastDelegation` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:1 w:1)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 39]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3619 + m * (110 ±0) + n * (96 ±0)`
		//  Estimated: `10000`
		// Minimum execution time: 69_000_000 picoseconds.
		Weight::from_parts(35_816_104, 10000)
			// Standard Error: 39_380
			.saturating_add(Weight::from_parts(743_757, 0).saturating_mul(n.into()))
			// Standard Error: 49_979
			.saturating_add(Weight::from_parts(1_068_024, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 39]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3978 + m * (93 ±0) + n * (82 ±0) + u * (20 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(30_908_692, 6028)
			// Standard Error: 40_649
			.saturating_add(Weight::from_parts(555_404, 0).saturating_mul(n.into()))
			// Standard Error: 51_565
			.saturating_add(Weight::from_parts(1_106_159, 0).saturating_mul(m.into()))
			// Standard Error: 236_774
			.saturating_add(Weight::from_parts(691_107, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 39]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3107 + m * (72 ±0) + n * (73 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(16_332_609, 6028)
			// Standard Error: 36_877
			.saturating_add(Weight::from_parts(601_591, 0).saturating_mul(n.into()))
			// Standard Error: 46_802
			.saturating_add(Weight::from_parts(828_342, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:0)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(2401), added: 2896, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 39]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1080 + m * (120 ±0) + n * (82 ±0)`
		//  Estimated: `6028 + n * (109 ±4)`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(14_919_945, 6028)
			// Standard Error: 29_063
			.saturating_add(Weight::from_parts(772_029, 0).saturating_mul(n.into()))
			// Standard Error: 36_885
			.saturating_add(Weight::from_parts(824_536, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 109).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(241), added: 2716, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1246 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_640_363, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:0 w:1)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2 w:1)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `754`
		//  Estimated: `6028`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 6028)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:41 w:41)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:41 w:41)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 40]`.
	fn increment_collator_rewards(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `853 + m * (98 ±0)`
		//  Estimated: `5495 + m * (2531 ±0)`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(19_288_801, 5495)
			// Standard Error: 42_566
			.saturating_add(Weight::from_parts(8_779_780, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712`
		//  Estimated: `3593`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::LastRewardReduction` (r:1 w:1)
	/// Proof: `ParachainStaking::LastRewardReduction` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:51 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(2030), added: 4505, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardCount` (r:2050 w:2050)
	/// Proof: `ParachainStaking::RewardCount` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:50 w:50)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 50]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (4859 ±0) + n * (3990 ±0)`
		//  Estimated: `126940 + m * (46036 ±2_476) + n * (34326 ±1_981)`
		// Minimum execution time: 489_000_000 picoseconds.
		Weight::from_parts(489_000_000, 126940)
			// Standard Error: 4_935_803
			.saturating_add(Weight::from_parts(79_269_813, 0).saturating_mul(n.into()))
			// Standard Error: 6_167_175
			.saturating_add(Weight::from_parts(97_562_650, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(155_u64))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((17_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(102_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((18_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 46036).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 34326).saturating_mul(n.into()))
	}
}