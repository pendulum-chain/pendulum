
//! Autogenerated weights for nomination
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("foucoco"), DB CACHE: 1024

// Executed Command:
// ../target/production/pendulum-node
// benchmark
// pallet
// --chain
// foucoco
// --wasm-execution=compiled
// --pallet
// nomination
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ../runtime/foucoco/src/weights/nomination.rs
// --template
// frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for nomination using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> nomination::WeightInfo for SubstrateWeight<T> {
	/// Storage: `Nomination::NominationEnabled` (r:0 w:1)
	/// Proof: `Nomination::NominationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_nomination_enabled() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nomination::NominationEnabled` (r:1 w:0)
	/// Proof: `Nomination::NominationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nomination::Vaults` (r:1 w:1)
	/// Proof: `Nomination::Vaults` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	fn opt_in_to_nomination() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `747`
		//  Estimated: `4212`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 4212)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nomination::Vaults` (r:1 w:1)
	/// Proof: `Nomination::Vaults` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:1)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:2 w:2)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Stake` (r:2 w:2)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:2 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:2 w:2)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:0)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:2 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:2 w:2)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:2 w:2)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn opt_out_of_nomination() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2570`
		//  Estimated: `8510`
		// Minimum execution time: 173_000_000 picoseconds.
		Weight::from_parts(178_000_000, 8510)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nomination::NominationEnabled` (r:1 w:0)
	/// Proof: `Nomination::NominationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Nomination::Vaults` (r:1 w:0)
	/// Proof: `Nomination::Vaults` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Stake` (r:2 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:2 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::PremiumRedeemThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::PremiumRedeemThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SystemCollateralCeiling` (r:1 w:0)
	/// Proof: `VaultRegistry::SystemCollateralCeiling` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deposit_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3363`
		//  Estimated: `9303`
		// Minimum execution time: 163_000_000 picoseconds.
		Weight::from_parts(166_000_000, 9303)
			.saturating_add(T::DbWeight::get().reads(28_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `Nomination::NominationEnabled` (r:1 w:0)
	/// Proof: `Nomination::NominationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Nomination::Vaults` (r:1 w:0)
	/// Proof: `Nomination::Vaults` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Stake` (r:1 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:1 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3647`
		//  Estimated: `7734`
		// Minimum execution time: 161_000_000 picoseconds.
		Weight::from_parts(165_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(26_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
}