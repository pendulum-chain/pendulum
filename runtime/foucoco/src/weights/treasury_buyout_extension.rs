
//! Autogenerated weights for treasury_buyout_extension
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("foucoco"), DB CACHE: 1024

// Executed Command:
// ../target/production/pendulum-node
// benchmark
// pallet
// --chain
// foucoco
// --wasm-execution=compiled
// --pallet
// treasury_buyout_extension
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ../runtime/foucoco/src/weights/treasury_buyout_extension.rs
// --template
// frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for treasury_buyout_extension using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> treasury_buyout_extension::WeightInfo for SubstrateWeight<T> {
	/// Storage: `TreasuryBuyoutExtension::AllowedCurrencies` (r:1 w:0)
	/// Proof: `TreasuryBuyoutExtension::AllowedCurrencies` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `DiaOracleModule::CoinInfosMap` (r:1 w:0)
	/// Proof: `DiaOracleModule::CoinInfosMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryBuyoutExtension::BuyoutLimit` (r:1 w:0)
	/// Proof: `TreasuryBuyoutExtension::BuyoutLimit` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `TreasuryBuyoutExtension::Buyouts` (r:1 w:1)
	/// Proof: `TreasuryBuyoutExtension::Buyouts` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn buyout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1214`
		//  Estimated: `7734`
		// Minimum execution time: 89_000_000 picoseconds.
		Weight::from_parts(90_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `TreasuryBuyoutExtension::BuyoutLimit` (r:0 w:1)
	/// Proof: `TreasuryBuyoutExtension::BuyoutLimit` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn update_buyout_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TreasuryBuyoutExtension::AllowedCurrencies` (r:1 w:1)
	/// Proof: `TreasuryBuyoutExtension::AllowedCurrencies` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 20]`.
	fn update_allowed_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3527`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(11_476_948, 3527)
			// Standard Error: 2_782
			.saturating_add(Weight::from_parts(969_566, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}