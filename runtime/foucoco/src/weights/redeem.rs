
//! Autogenerated weights for redeem
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("foucoco"), DB CACHE: 1024

// Executed Command:
// ../target/production/pendulum-node
// benchmark
// pallet
// --chain
// foucoco
// --wasm-execution=compiled
// --pallet
// redeem
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ../runtime/foucoco/src/weights/redeem.rs
// --template
// frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for redeem using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> redeem::WeightInfo for SubstrateWeight<T> {
	/// Storage: `Redeem::LimitVolumeAmount` (r:1 w:0)
	/// Proof: `Redeem::LimitVolumeAmount` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `Fee::RedeemFee` (r:1 w:0)
	/// Proof: `Fee::RedeemFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::RedeemMinimumTransferAmount` (r:1 w:0)
	/// Proof: `Redeem::RedeemMinimumTransferAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Security::Nonce` (r:1 w:1)
	/// Proof: `Security::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::PremiumRedeemThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::PremiumRedeemThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `Fee::PremiumRedeemFee` (r:1 w:0)
	/// Proof: `Fee::PremiumRedeemFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Security::ActiveBlockCount` (r:1 w:0)
	/// Proof: `Security::ActiveBlockCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::RedeemPeriod` (r:1 w:0)
	/// Proof: `Redeem::RedeemPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::RedeemRequests` (r:0 w:1)
	/// Proof: `Redeem::RedeemRequests` (`max_values`: None, `max_size`: Some(356), added: 2831, mode: `MaxEncodedLen`)
	fn request_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1907`
		//  Estimated: `7734`
		// Minimum execution time: 83_000_000 picoseconds.
		Weight::from_parts(85_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Tokens::Accounts` (r:3 w:3)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	/// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::LiquidationVault` (r:1 w:1)
	/// Proof: `VaultRegistry::LiquidationVault` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn liquidation_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1495`
		//  Estimated: `8865`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(97_000_000, 8865)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `Redeem::RedeemRequests` (r:1 w:1)
	/// Proof: `Redeem::RedeemRequests` (`max_values`: None, `max_size`: Some(356), added: 2831, mode: `MaxEncodedLen`)
	/// Storage: `StellarRelay::NewValidatorsEnactmentBlockHeight` (r:1 w:0)
	/// Proof: `StellarRelay::NewValidatorsEnactmentBlockHeight` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `StellarRelay::Validators` (r:1 w:0)
	/// Proof: `StellarRelay::Validators` (`max_values`: Some(1), `max_size`: Some(70382), added: 70877, mode: `MaxEncodedLen`)
	/// Storage: `StellarRelay::Organizations` (r:1 w:0)
	/// Proof: `StellarRelay::Organizations` (`max_values`: Some(1), `max_size`: Some(37232), added: 37727, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::LimitVolumeAmount` (r:1 w:0)
	/// Proof: `Redeem::LimitVolumeAmount` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:0)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1698`
		//  Estimated: `71867`
		// Minimum execution time: 8_003_000_000 picoseconds.
		Weight::from_parts(8_175_000_000, 71867)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::RedeemRequests` (r:1 w:1)
	/// Proof: `Redeem::RedeemRequests` (`max_values`: None, `max_size`: Some(356), added: 2831, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::RedeemPeriod` (r:1 w:0)
	/// Proof: `Redeem::RedeemPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Security::ActiveBlockCount` (r:1 w:0)
	/// Proof: `Security::ActiveBlockCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `Fee::PunishmentFee` (r:1 w:0)
	/// Proof: `Fee::PunishmentFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:0)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::PunishmentDelay` (r:1 w:0)
	/// Proof: `VaultRegistry::PunishmentDelay` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:2 w:0)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::CancelledRedeemAmount` (r:0 w:1)
	/// Proof: `Redeem::CancelledRedeemAmount` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	fn cancel_redeem_reimburse() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2801`
		//  Estimated: `7734`
		// Minimum execution time: 133_000_000 picoseconds.
		Weight::from_parts(139_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::RedeemRequests` (r:1 w:1)
	/// Proof: `Redeem::RedeemRequests` (`max_values`: None, `max_size`: Some(356), added: 2831, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::RedeemPeriod` (r:1 w:0)
	/// Proof: `Redeem::RedeemPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Security::ActiveBlockCount` (r:1 w:0)
	/// Proof: `Security::ActiveBlockCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `Fee::PunishmentFee` (r:1 w:0)
	/// Proof: `Fee::PunishmentFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:0)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::PunishmentDelay` (r:1 w:0)
	/// Proof: `VaultRegistry::PunishmentDelay` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::CancelledRedeemAmount` (r:0 w:1)
	/// Proof: `Redeem::CancelledRedeemAmount` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	fn cancel_redeem_retry() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2656`
		//  Estimated: `7734`
		// Minimum execution time: 111_000_000 picoseconds.
		Weight::from_parts(116_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	/// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:2 w:0)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	fn self_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1891`
		//  Estimated: `6096`
		// Minimum execution time: 80_000_000 picoseconds.
		Weight::from_parts(81_000_000, 6096)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Redeem::RedeemPeriod` (r:0 w:1)
	/// Proof: `Redeem::RedeemPeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_redeem_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Redeem::RedeemRequests` (r:1 w:1)
	/// Proof: `Redeem::RedeemRequests` (`max_values`: None, `max_size`: Some(356), added: 2831, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::CancelledRedeemAmount` (r:1 w:1)
	/// Proof: `Redeem::CancelledRedeemAmount` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint_tokens_for_reimbursed_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1982`
		//  Estimated: `7734`
		// Minimum execution time: 67_000_000 picoseconds.
		Weight::from_parts(68_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Redeem::LimitVolumeAmount` (r:0 w:1)
	/// Proof: `Redeem::LimitVolumeAmount` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::LimitVolumeCurrencyId` (r:0 w:1)
	/// Proof: `Redeem::LimitVolumeCurrencyId` (`max_values`: Some(1), `max_size`: Some(46), added: 541, mode: `MaxEncodedLen`)
	/// Storage: `Redeem::IntervalLength` (r:0 w:1)
	/// Proof: `Redeem::IntervalLength` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn rate_limit_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Redeem::RedeemMinimumTransferAmount` (r:0 w:1)
	/// Proof: `Redeem::RedeemMinimumTransferAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn minimum_transfer_amount_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}