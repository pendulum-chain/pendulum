
//! Autogenerated weights for vault_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gianfrancos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("amplitude"), DB CACHE: 1024

// Executed Command:
// ../target/production/pendulum-node
// benchmark
// pallet
// --chain
// amplitude
// --wasm-execution=compiled
// --pallet
// vault_registry
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ../runtime/amplitude/src/weights/vault_registry.rs
// --template
// frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for vault_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> vault_registry::WeightInfo for SubstrateWeight<T> {
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::PremiumRedeemThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::PremiumRedeemThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::LiquidationCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::LiquidationCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::MinimumCollateralVault` (r:1 w:0)
	/// Proof: `VaultRegistry::MinimumCollateralVault` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SystemCollateralCeiling` (r:1 w:0)
	/// Proof: `VaultRegistry::SystemCollateralCeiling` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::VaultStellarPublicKey` (r:1 w:0)
	/// Proof: `VaultRegistry::VaultStellarPublicKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Stake` (r:1 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:1 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	fn register_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1079`
		//  Estimated: `4544`
		// Minimum execution time: 117_000_000 picoseconds.
		Weight::from_parts(119_000_000, 4544)
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SystemCollateralCeiling` (r:1 w:0)
	/// Proof: `VaultRegistry::SystemCollateralCeiling` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Stake` (r:1 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:1 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	fn deposit_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2605`
		//  Estimated: `7734`
		// Minimum execution time: 143_000_000 picoseconds.
		Weight::from_parts(146_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(23_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:0)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Stake` (r:1 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:1 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::PremiumRedeemThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::PremiumRedeemThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	fn withdraw_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2579`
		//  Estimated: `7734`
		// Minimum execution time: 149_000_000 picoseconds.
		Weight::from_parts(151_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(23_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: `VaultRegistry::VaultStellarPublicKey` (r:1 w:1)
	/// Proof: `VaultRegistry::VaultStellarPublicKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_public_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `3799`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3799)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:0)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:0)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn accept_new_issues() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1484`
		//  Estimated: `4949`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 4949)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_custom_secure_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `4176`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 4176)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::MinimumCollateralVault` (r:0 w:1)
	/// Proof: `VaultRegistry::MinimumCollateralVault` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_minimum_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::SystemCollateralCeiling` (r:0 w:1)
	/// Proof: `VaultRegistry::SystemCollateralCeiling` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_system_collateral_ceiling() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:1)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::SecureCollateralThreshold` (r:0 w:1)
	/// Proof: `VaultRegistry::SecureCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_secure_collateral_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `1565`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1565)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `VaultRegistry::PremiumRedeemThreshold` (r:0 w:1)
	/// Proof: `VaultRegistry::PremiumRedeemThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_premium_redeem_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::LiquidationCollateralThreshold` (r:0 w:1)
	/// Proof: `VaultRegistry::LiquidationCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_liquidation_collateral_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::LiquidationCollateralThreshold` (r:1 w:0)
	/// Proof: `VaultRegistry::LiquidationCollateralThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::Nonce` (r:1 w:0)
	/// Proof: `VaultStaking::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalCurrentStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalCurrentStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Security::ParachainStatus` (r:1 w:0)
	/// Proof: `Security::ParachainStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::Metadata` (r:2 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(897), added: 3372, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::Stake` (r:1 w:1)
	/// Proof: `VaultStaking::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashPerToken` (r:1 w:0)
	/// Proof: `VaultStaking::SlashPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::SlashTally` (r:1 w:1)
	/// Proof: `VaultStaking::SlashTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardCurrencies` (r:1 w:0)
	/// Proof: `VaultStaking::RewardCurrencies` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::Stake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::Stake` (`max_values`: None, `max_size`: Some(202), added: 2677, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardPerToken` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardPerToken` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardTally` (r:1 w:1)
	/// Proof: `PooledVaultRewards::RewardTally` (`max_values`: None, `max_size`: Some(264), added: 2739, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::TotalRewards` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalRewards` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `VaultStaking::RewardPerToken` (r:1 w:1)
	/// Proof: `VaultStaking::RewardPerToken` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::TotalStake` (r:1 w:1)
	/// Proof: `VaultStaking::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultStaking::RewardTally` (r:1 w:1)
	/// Proof: `VaultStaking::RewardTally` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledVaultRewards::TotalStake` (r:1 w:1)
	/// Proof: `PooledVaultRewards::TotalStake` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `PooledVaultRewards::RewardCurrencies` (r:1 w:0)
	/// Proof: `PooledVaultRewards::RewardCurrencies` (`max_values`: None, `max_size`: Some(523), added: 2998, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::TotalUserVaultCollateral` (r:1 w:1)
	/// Proof: `VaultRegistry::TotalUserVaultCollateral` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `VaultRegistry::SystemCollateralCeiling` (r:1 w:0)
	/// Proof: `VaultRegistry::SystemCollateralCeiling` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `VaultRegistry::LiquidationVault` (r:1 w:1)
	/// Proof: `VaultRegistry::LiquidationVault` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_undercollateralized_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2779`
		//  Estimated: `7734`
		// Minimum execution time: 257_000_000 picoseconds.
		Weight::from_parts(262_000_000, 7734)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	/// Storage: `VaultRegistry::Vaults` (r:1 w:1)
	/// Proof: `VaultRegistry::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn recover_vault_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `649`
		//  Estimated: `4114`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 4114)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `VaultRegistry::PunishmentDelay` (r:0 w:1)
	/// Proof: `VaultRegistry::PunishmentDelay` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_punishment_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}