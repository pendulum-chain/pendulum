
//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bogdans-M2-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("amplitude"), DB CACHE: 1024

// Executed Command:
// ./target/release/pendulum-node
// benchmark
// pallet
// --chain
// amplitude
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// parachain-staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// runtime/amplitude/src/weights/parachain-staking.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for SubstrateWeight<T> {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ParachainStaking CandidatePool (r:41 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:1640 w:1640)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:40 w:40)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3891 ±0) + n * (4052 ±0)`
		//  Estimated: `101750 + m * (37911 ±1_054) + n * (33703 ±1_054)`
		// Minimum execution time: 595_000_000 picoseconds.
		Weight::from_parts(613_000_000, 101750)
			// Standard Error: 3_104_233
			.saturating_add(Weight::from_parts(90_791_222, 0).saturating_mul(n.into()))
			// Standard Error: 3_104_233
			.saturating_add(Weight::from_parts(93_574_370, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(124_u64))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(81_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 37911).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 33703).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[8, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434 + n * (48 ±0)`
		//  Estimated: `3406`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(7_372_613, 3406)
			// Standard Error: 11_493
			.saturating_add(Weight::from_parts(285_897, 0).saturating_mul(n.into()))
			// Standard Error: 9_233
			.saturating_add(Weight::from_parts(309_585, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427`
		//  Estimated: `1497`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 1497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ParachainStaking CandidatePool (r:40 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:41 w:41)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:40 w:40)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:41 w:41)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[9, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3143 ±0) + n * (2723 ±0)`
		//  Estimated: `9446 + m * (2716 ±28) + n * (4505 ±27)`
		// Minimum execution time: 175_000_000 picoseconds.
		Weight::from_parts(178_000_000, 9446)
			// Standard Error: 76_352
			.saturating_add(Weight::from_parts(1_839_740, 0).saturating_mul(n.into()))
			// Standard Error: 78_833
			.saturating_add(Weight::from_parts(17_270_939, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(9_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4505).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2158 + m * (45 ±0) + n * (86 ±0)`
		//  Estimated: `5495`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(55_257_753, 5495)
			// Standard Error: 15_095
			.saturating_add(Weight::from_parts(568_354, 0).saturating_mul(n.into()))
			// Standard Error: 14_352
			.saturating_add(Weight::from_parts(598_729, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: ParachainStaking CandidatePool (r:39 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn init_leave_candidates(n: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1872 ±0) + n * (2082 ±0)`
		//  Estimated: `3406 + n * (4505 ±0)`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(67_000_000, 3406)
			// Standard Error: 24_947
			.saturating_add(Weight::from_parts(2_817_902, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4505).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `758 + m * (96 ±0) + n * (59 ±0)`
		//  Estimated: `10000`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(17_763_044, 10000)
			// Standard Error: 12_598
			.saturating_add(Weight::from_parts(460_161, 0).saturating_mul(n.into()))
			// Standard Error: 9_483
			.saturating_add(Weight::from_parts(419_062, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:41 w:41)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:40 w:40)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:41 w:41)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[9, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1257 ±0) + n * (655 ±0)`
		//  Estimated: `5495 + m * (2716 ±6) + n * (213 ±6)`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(56_000_000, 5495)
			// Standard Error: 42_885
			.saturating_add(Weight::from_parts(912_996, 0).saturating_mul(n.into()))
			// Standard Error: 43_205
			.saturating_add(Weight::from_parts(18_615_890, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 213).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:41 w:41)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (455 ±0) + n * (292 ±0) + u * (20 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 78_000_000 picoseconds.
		Weight::from_parts(79_000_000, 5495)
			// Standard Error: 22_379
			.saturating_add(Weight::from_parts(1_080_738, 0).saturating_mul(n.into()))
			// Standard Error: 21_608
			.saturating_add(Weight::from_parts(7_477_868, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:41 w:41)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 39]`.
	/// The range of component `m` is `[0, 40]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (442 ±0) + n * (276 ±0)`
		//  Estimated: `5495 + m * (2519 ±0)`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(51_000_000, 5495)
			// Standard Error: 21_036
			.saturating_add(Weight::from_parts(521_323, 0).saturating_mul(n.into()))
			// Standard Error: 20_572
			.saturating_add(Weight::from_parts(6_885_083, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(m.into()))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:1 w:1)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3555 + m * (113 ±0) + n * (94 ±0)`
		//  Estimated: `10000`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(61_230_042, 10000)
			// Standard Error: 15_096
			.saturating_add(Weight::from_parts(734_668, 0).saturating_mul(n.into()))
			// Standard Error: 15_502
			.saturating_add(Weight::from_parts(720_729, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:2 w:0)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3904 + m * (93 ±0) + n * (90 ±0) + u * (20 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 76_000_000 picoseconds.
		Weight::from_parts(60_272_765, 6028)
			// Standard Error: 16_056
			.saturating_add(Weight::from_parts(661_873, 0).saturating_mul(n.into()))
			// Standard Error: 16_487
			.saturating_add(Weight::from_parts(741_269, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:2 w:0)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3155 + m * (74 ±0) + n * (74 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(24_450_456, 6028)
			// Standard Error: 13_176
			.saturating_add(Weight::from_parts(649_197, 0).saturating_mul(n.into()))
			// Standard Error: 13_530
			.saturating_add(Weight::from_parts(772_252, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:2 w:0)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(1921), added: 2416, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 40]`.
	/// The range of component `m` is `[1, 39]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3155 + m * (74 ±0) + n * (74 ±0)`
		//  Estimated: `6028`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(30_920_715, 6028)
			// Standard Error: 15_455
			.saturating_add(Weight::from_parts(670_189, 0).saturating_mul(n.into()))
			// Standard Error: 15_870
			.saturating_add(Weight::from_parts(634_001, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1076 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_811_600, 4764)
			// Standard Error: 17_278
			.saturating_add(Weight::from_parts(132_831, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:2 w:1)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `754`
		//  Estimated: `6028`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6028)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:41 w:41)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:41 w:41)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `m` is `[1, 40]`.
	fn increment_collator_rewards(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `855 + m * (98 ±0)`
		//  Estimated: `5495 + m * (2531 ±0)`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(28_721_195, 5495)
			// Standard Error: 18_671
			.saturating_add(Weight::from_parts(11_788_351, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `575`
		//  Estimated: `3593`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(31_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	/// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:41 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(2030), added: 4505, mode: MaxEncodedLen)
	/// Storage: ParachainStaking RewardCount (r:1640 w:1640)
	/// Proof: ParachainStaking RewardCount (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:40 w:40)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 40]`.
	/// The range of component `m` is `[0, 40]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3891 ±0) + n * (3991 ±0)`
		//  Estimated: `101750 + m * (37911 ±1_054) + n * (33703 ±16)`
		// Minimum execution time: 525_000_000 picoseconds.
		Weight::from_parts(530_000_000, 101750)
			// Standard Error: 2_947_301
			.saturating_add(Weight::from_parts(89_026_856, 0).saturating_mul(n.into()))
			// Standard Error: 2_947_301
			.saturating_add(Weight::from_parts(90_345_662, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(125_u64))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((14_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(82_u64))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((14_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 37911).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 33703).saturating_mul(n.into()))
	}
}