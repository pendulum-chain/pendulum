
//! Autogenerated weights for `orml_asset_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Marcels-MBP`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("foucoco"), DB CACHE: 1024

// Executed Command:
// ./target/production/pendulum-node
// benchmark
// pallet
// --chain
// foucoco
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// orml-asset-registry
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// runtime/foucoco/src/weights/orml_asset_registry.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `orml_asset_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> orml_asset_registry::WeightInfo for WeightInfo<T> {
	/// Storage: AssetRegistry Metadata (r:1 w:1)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn register_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104`
		//  Estimated: `7138`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7138))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AssetRegistry Metadata (r:1 w:1)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:2)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn update_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745`
		//  Estimated: `8420`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8420))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn set_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
